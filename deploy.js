const ethers = require("ethers");
const fs = require("fs-extra");
require("dotenv").config();
async function main() {
  //HTTP://127.0.0.1:7545
  const provider = new ethers.providers.JsonRpcBatchProvider(
    process.env.RPC_URL
  );
  const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf-8");
  let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    encryptedJson,
    process.env.PRIVATE_KEY_PASSWORD
  );
  wallet = await wallet.connect(provider);
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf-8");
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf-8"
  );
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  console.log("Deploying");
  const contract = await contractFactory.deploy();
  await contract.deployTransaction.wait(1); // potwierdzenie ze poszło okej mozna wywalic tą linijke
  console.log(`Contact adress: ${contract.address}`);

  //   console.log("let's deploy with only transaction data");
  //   const nonce = await wallet.getTransactionCount();
  //   const tx = {
  //     nonce: nonce,
  //     gasPrice: "20000000000",
  //     gasLimit: "1000000",
  //     to: null,
  //     value: 0,
  //     data: "0x608060405234801561001057600080fd5b506107af806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636057361d146100675780636a238c5c146100835780636f760f41146100a15780639e7a13ad146100bd578063a6b7fc5b146100ee578063b2ac62ef1461010c575b600080fd5b610081600480360381019061007c91906104ab565b61013c565b005b61008b61014f565b6040516100989190610568565b60405180910390f35b6100bb60048036038101906100b6919061044f565b610155565b005b6100d760048036038101906100d291906104ab565b6101eb565b6040516100e5929190610583565b60405180910390f35b6100f66102a7565b6040516101039190610568565b60405180910390f35b61012660048036038101906101219190610406565b6102b0565b6040516101339190610568565b60405180910390f35b8060008190555061014b6102a7565b5050565b60005481565b6000604051806040016040528083815260200184815250905060028190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101c09291906102de565b505050816001846040516101d49190610551565b908152602001604051809103902081905550505050565b600281815481106101fb57600080fd5b90600052602060002090600202016000915090508060000154908060010180546102249061067c565b80601f01602080910402602001604051908101604052809291908181526020018280546102509061067c565b801561029d5780601f106102725761010080835404028352916020019161029d565b820191906000526020600020905b81548152906001019060200180831161028057829003601f168201915b5050505050905082565b60008054905090565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b8280546102ea9061067c565b90600052602060002090601f01602090048101928261030c5760008555610353565b82601f1061032557805160ff1916838001178555610353565b82800160010185558215610353579182015b82811115610352578251825591602001919060010190610337565b5b5090506103609190610364565b5090565b5b8082111561037d576000816000905550600101610365565b5090565b600061039461038f846105d8565b6105b3565b9050828152602081018484840111156103b0576103af610742565b5b6103bb84828561063a565b509392505050565b600082601f8301126103d8576103d761073d565b5b81356103e8848260208601610381565b91505092915050565b60008135905061040081610762565b92915050565b60006020828403121561041c5761041b61074c565b5b600082013567ffffffffffffffff81111561043a57610439610747565b5b610446848285016103c3565b91505092915050565b600080604083850312156104665761046561074c565b5b600083013567ffffffffffffffff81111561048457610483610747565b5b610490858286016103c3565b92505060206104a1858286016103f1565b9150509250929050565b6000602082840312156104c1576104c061074c565b5b60006104cf848285016103f1565b91505092915050565b60006104e382610609565b6104ed8185610614565b93506104fd818560208601610649565b61050681610751565b840191505092915050565b600061051c82610609565b6105268185610625565b9350610536818560208601610649565b80840191505092915050565b61054b81610630565b82525050565b600061055d8284610511565b915081905092915050565b600060208201905061057d6000830184610542565b92915050565b60006040820190506105986000830185610542565b81810360208301526105aa81846104d8565b90509392505050565b60006105bd6105ce565b90506105c982826106ae565b919050565b6000604051905090565b600067ffffffffffffffff8211156105f3576105f261070e565b5b6105fc82610751565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561066757808201518184015260208101905061064c565b83811115610676576000848401525b50505050565b6000600282049050600182168061069457607f821691505b602082108114156106a8576106a76106df565b5b50919050565b6106b782610751565b810181811067ffffffffffffffff821117156106d6576106d561070e565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61076b81610630565b811461077657600080fd5b5056fea2646970667358221220abda6920b18d66a4068ce87986187995b609e7e0c8b4f1dcde9e9cda66e9886164736f6c63430008070033",
  //     chainId: 5777,
  //   };
  //   const sentTxResponse = await wallet.sendTransaction(tx);
  //   await sentTxResponse.wait(1);
  //   console.log(signedTxResponse);

  const currentFavNumber = await contract.retrive();
  console.log("current favourite number is: " + currentFavNumber.toString());
  const transactionResponse = await contract.store("7");
  const transactionReceipt = await transactionResponse.wait(1);
  const updatedfavouritenumber = await contract.retrive();
  console.log("Updated favourite number is: " + updatedfavouritenumber);
}
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
